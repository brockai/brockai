name: Deploy User Acceptance Testing

on:
  push:
    branches:
      - uat

jobs:

  Clone-brockai: 
    runs-on: ubuntu-latest
    steps:
      - name: Clone brockai repo
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DROPLET_IP}}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            rm -rf ~/brockai
            git clone -b uat https://github.com/brockai/brockai.git

  Setup-Streamlit-Python:
    runs-on: ubuntu-latest
    needs: Clone-brockai
    steps:
      - name: Setup service & python env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # turn off streamlit service, copy service config, reload daemon
            sudo systemctl stop streamlit-uat.service || true
            cp ~/brockai/config/streamlit-uat.service /etc/systemd/system/streamlit-uat.service

            # remove existing app, copy over cloned app
            rm /var/www/streamlit-uat -r || true
            mkdir /var/www/streamlit-uat || true
            cp ~/.env.uat /var/www/streamlit-uat/.env
            cp ~/brockai/app/. -r /var/www/streamlit-uat

            # create python env, install requirements, start streamlit
            sudo python3 -m venv /var/www/streamlit-uat/brockai-uat
            source /var/www/streamlit-uat/brockai-uat/bin/activate

            pip install -r /var/www/streamlit-uat/requirements.txt

            sudo systemctl start streamlit-uat.service || true

  Compose-Up-Opensearch:
    runs-on: ubuntu-latest
    needs: Setup-Streamlit-Python
    steps:
      - name: Start opensearch
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/brockai/
            docker compose up -d opensearch-node1
            docker compose up -d opensearch-node2
            docker compose up -d opensearch-dashboards

  Compose-Up-Airflow:
    runs-on: ubuntu-latest
    needs: Compose-Up-Opensearch
    steps:
      - name: Start airflow
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cp ~/.env.docker ~/brockai/.env
            cd ~/brockai/
            docker compose up -d redis
            docker compose up -d postgres
            docker compose up -d airflow-init
            docker compose up -d airflow-webserver
            docker compose up -d flower
            docker compose up -d airflow-trigger
            docker compose up -d airflow-scheduler
            docker compose up -d airflow-worker

  Restart-Docker:
    runs-on: ubuntu-latest
    needs: Compose-Up-Airflow
    steps:
      - name: Start airflow
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker exec brockai-airflow-worker-1 airflow scheduler -D


# docker restart brockai-airflow-worker-1


            
## Not needed at this time
 # Setup-Platform:
  #   runs-on: ubuntu-latest
  #   needs: Setup-Streamlit-Python
  #   steps:
  #     - name: Setup platform
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.DROPLET_IP }}
  #         username: ${{ secrets.DROPLET_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           # build and deploy platform
  #           # apt install npm || true
  #           cp ~/.env.react -r ~/brockai/app/platformx
  #           cd ~/brockai/app/platformx
  #           rm -r node_modules
  #           npm install
  #           npm run build:production
  #           rm /var/www/platform -r || true
  #           mkdir /var/www/platform || true
  #           cp ~/brockai/app/platformx/build/. -r /var/www/platform